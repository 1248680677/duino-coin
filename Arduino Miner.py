#!/usr/bin/env python
# -*- coding: utf8 -*-
AAAAAAAAAAAAAAAAAAAAAA=print
𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ㦓=str
𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﳈ=input
𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐣲=open
𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𬝮=True
𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﯤ=int
𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐬀=bytes
𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐠍=range
𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐢁=hash
AAAAAAAAAAAAAAAAAAAAAA("===========================================")
AAAAAAAAAAAAAAAAAAAAAA("  Duino-Coin Arduino miner version 0.6.1")
AAAAAAAAAAAAAAAAAAAAAA(" https://github.com/revoxhere/duino-coin")
AAAAAAAAAAAAAAAAAAAAAA("         copyright by revox 2019")
AAAAAAAAAAAAAAAAAAAAAA("===========================================\n")
import socket,threading,time,random,configparser,sys,serial,hashlib,serial.tools.list_ports
𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﴔ=hashlib.sha1
𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ铄=serial.Serial
𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﻠ=serial.tools
𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐡇=sys.exit
𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𧕘=configparser.ConfigParser
𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐢞=time.sleep
𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𞡬=threading.Timer
𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﻏ=socket.socket
from pathlib import Path
𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𢾓="0.6"
def 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﵩ():
 global 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱܠ,𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐤔
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱܠ=𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐤔
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐤔=0
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𞡬(1.0,𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﵩ).start()
𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐬪=[0,0]
𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱܠ=0
𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐤔=0
𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐰮=𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𧕘()
if not Path("ArduinoMinerConfig.ini").is_file():
 AAAAAAAAAAAAAAAAAAAAAA("Initial configuration, you can edit 'ArduinoMinerConfig.ini' later\n")
 AAAAAAAAAAAAAAAAAAAAAA("Scanning ports...")
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱףּ=𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﻠ.list_ports.comports()
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ基=[]
 for 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ蛳 in 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱףּ:
  𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ基.append(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ蛳.device)
 AAAAAAAAAAAAAAAAAAAAAA("Found COM ports: "+𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ㦓(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ基))
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ寅=𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﳈ("Enter your Arduino port (e.g: COM8): ")
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ閛=𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﳈ("Enter pool adddress (official: serveo.net): ")
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐫍=𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﳈ("Enter pool port (official: 14808): ")
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﳟ=𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﳈ("Enter username: ")
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﮤ=𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﳈ("Enter password: ")
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐰮['pool']={"address":𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ閛,"arduino":𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ寅,"port":𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐫍,"username":𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﳟ,"password":𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﮤ}
 with 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐣲("ArduinoMinerConfig.ini","w")as configfile:
  𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐰮.write(configfile)
else:
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐰮.read("ArduinoMinerConfig.ini")
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ寅=𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐰮["pool"]["arduino"]
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ閛=𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐰮["pool"]["address"]
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐫍=𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐰮["pool"]["port"]
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﳟ=𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐰮["pool"]["username"]
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﮤ=𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐰮["pool"]["password"]
while 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𬝮:
 AAAAAAAAAAAAAAAAAAAAAA("Connecting to pool...")
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ孜=𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﻏ()
 try:
  𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ孜.connect((𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ閛,𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﯤ(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐫍)))
  AAAAAAAAAAAAAAAAAAAAAA("Connected!")
  break
 except:
  AAAAAAAAAAAAAAAAAAAAAA("Cannot connect to pool server. Retrying in 30 seconds...")
  𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐢞(30)
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐢞(0.025)
AAAAAAAAAAAAAAAAAAAAAA("Connecting to Arduino...")
try:
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𣧊=𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ铄(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ寅,9600)
 AAAAAAAAAAAAAAAAAAAAAA("Connected to Arduino!")
except:
 AAAAAAAAAAAAAAAAAAAAAA("Cannot connect to Arduino. Check your ArduinoMinerConfig.ini file.")
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐢞(15)
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐡇()
AAAAAAAAAAAAAAAAAAAAAA("Checking version...")
𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𪱳=𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ孜.recv(1024).decode()
if 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𪱳==𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𢾓:
 AAAAAAAAAAAAAAAAAAAAAA("Miner is up-to-date.")
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐢞(0.1)
else:
 AAAAAAAAAAAAAAAAAAAAAA("Miner is outdated, please download latest version from https://github.com/revoxhere/duino-coin/releases/")
 AAAAAAAAAAAAAAAAAAAAAA("Exiting in 5s.")
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐢞(5)
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐡇()
AAAAAAAAAAAAAAAAAAAAAA("Logging in...")
𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ孜.send(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐬀("LOGI,"+𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﳟ+","+𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﮤ,encoding="utf8"))
while 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𬝮:
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ源=𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ孜.recv(1024).decode()
 if 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ源=="OK":
  AAAAAAAAAAAAAAAAAAAAAA("Logged in!")
  break
 if 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ源=="NO":
  AAAAAAAAAAAAAAAAAAAAAA("Error, closing in 5 seconds...")
  𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ孜.close()
  𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐢞(5)
  𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐡇()
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐢞(0.025)
AAAAAAAAAAAAAAAAAAAAAA("Started Arduino miner thread...")
𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐢞(1)
𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﵩ()
while 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𬝮:
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ孜.send(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐬀("JOB",encoding="utf8"))
 while 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𬝮:
  𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ拏=𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ孜.recv(1024).decode()
  if 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ拏:
   break
  𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐢞(0.025)
 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ拏=𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ拏.split(",")
 AAAAAAAAAAAAAAAAAAAAAA("Recived new job from pool, difficulty: "+𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ拏[2])
 for 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ탋 in 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐠍(100*𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﯤ(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ拏[2])+1):
  𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐢁=𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱﴔ(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ㦓(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ拏[0]+𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ㦓(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ탋)).encode("utf-8")).hexdigest()
  if 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ拏[1]==𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐢁:
   𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ孜.send(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐬀(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ㦓(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ탋)+","+𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ㦓(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐤔),encoding="utf8"))
   while 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𬝮:
    𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𣧊.write(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐬀(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ㦓(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐤔),encoding="utf8"))
    𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐤔=𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𣧊.readline().decode('utf8').rstrip()
    𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ臘=𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ孜.recv(1024).decode()
    if 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ臘=="GOOD":
     𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐬪[0]=𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐬪[0]+1 
     AAAAAAAAAAAAAAAAAAAAAA("Share accepted "+𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ㦓(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐬪[0])+"/"+𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ㦓(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐬪[0]+𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐬪[1])+" ("+𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ㦓(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐬪[0]/(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐬪[0]+𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐬪[1])*100)+"%), "+𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ㦓(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱܠ)+" H/s")
     break
    elif 𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ臘=="BAD":
     𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐬪[1]=𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐬪[1]+1 
     AAAAAAAAAAAAAAAAAAAAAA("Share rejected "+𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ㦓(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐬪[0])+"/"+𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ㦓(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐬪[0]+𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐬪[1])+" ("+𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ㦓(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐬪[0]/(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐬪[0]+𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐬪[1])*100)+"%), "+𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ㦓(𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱܠ)+" H/s")
     break
    𘂖𧪨㲓𥅕𗩨𦯓𐩫𧚃𞹼ﶝ𫶖𐨢급𐳋툰𞺁ےﱧ𐲜مࠋ힟𧄧𞸖ڦﱕ𠽓𞢿𤑌ﴋ𪝈د耖𬞠鲕ڜ𡢓綋ﻁﳫڱ𐢞(0.025)
   break
# Created by pyminifier (https://github.com/liftoff/pyminifier)
